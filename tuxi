#!/usr/bin/env sh

current_url="whoogle.himiko.cloud"

# Messages and checks functions
help_text () {
    printf "%bUsage:%b tuxi %b[options]%b %bquery%b\n"  "$G" "$N"  "$Y" "$N"  "$M" "$N"
    printf "\n"
    printf "%bOptions:%b\n"                             "$G" "$N"
    printf "  -h                    Show this help message and exit.\n" 
    printf "  -r                    Raw search results.\n"
    printf "                        (no pretty output, no colors)\n"
    printf "  -q                    Only output search results.\n"
    printf "                        (silences \"Did you mean?\", greeting, usage)\n"
    printf "  -u                    Change the current URL\n"
    printf "                        (change the URL for Whoogle's instance)"
    printf "\n"
}

# Checks if dependencies are installed.
check_deps() {
    while [ -n "$1" ]; do
        if [ ! "$(command -v $1)" ]; then
            error_msg "\"$1\" not found!"
            exit 2
        fi
        shift
    done
}

info_msg() {
    printf "%b>%b %s\n"  "$G" "$N" "$*"
}

error_msg() {
    printf "%b%s%b\n"  "$R" "$*" "$N"
}

# Scrap HTML with external arguments
snipcall() {
    com="$(echo "$google_html" | eval "$@")"
    [ -n "$com" ] && output "$com" && exit 0
}

#############################
##### Dependency check  #####
#############################

# pup : https://github.com/ericchiang/pup
# recode : https://github.com/rrthomas/recode
# jq : https://github.com/stedolan/jq
check_deps "pup" "recode" "jq"


###############################
#####       Defaults      #####
###############################


# color codes
N="\033[0m"    # Reset
R="\033[1;31m" # Red
G="\033[1;32m" # Green
Y="\033[1;33m" # Yellow
M="\033[1;35m" # Magenta
C="\033[1;36m" # Cyan

# options
raw=false
quiet=false

# search result output format (changes if raw=true)
output() { 
    printf "%b---%b\n%s\n%b---%b\n"  "$G" "$N" "$*" "$G" "$N"
}


#############################
#####     Getopts       #####
#############################

# -h : help
# -r : raw search result
# -q : silences greeting and did you mean
while getopts "hrqu" OPT; do
    case "$OPT" in
    h)
        help_text
        exit 0
        ;;
    r)  
        raw=true
        ;;
    q)  
        quiet=true
        ;;
    u)
        temp_url=$(echo "$2" | sed "s/\"//g; s/\'//g; s/^https:\/\/www.//g") 
        sed -i "s/^current_url=.*/current_url=\"$temp_url\"/g" ./tuxi 
        exit 0
        ;;
    *)
        help_text | head -n 1
        exit 1
    esac
done
# shifts to query
shift $((OPTIND-1))


# URl field check
[ -z $current_url ] && echo "Url field empty. Use -u to add an URL" && exit 0
#############################
#####   Raw formatting  #####
#############################

# If raw=true: No colors, No pretty output
if $raw; then
    N=""; R=""; G=""; Y=""; M=""; C="";

    output () { 
        printf "%s\n" "$*"
    }
fi


#############################
#####    Query check    #####
#############################

# If query is empty: exit
# If quiet=false: Prints greeting and usage
if [ -z "$1" ]; then
if [ $quiet = "false" ]; then
    printf "Hi, I'm Tuxi. Ask me anything!\n"
    help_text | head -n 1 
fi
exit 0
fi
    
# Else, all arguments are saved in $query
query="$*"
query="$(echo $query | sed "s/+/%2b/g; s/ /+/g")"


##############################
##### Snippet extraction #####
##############################


# Response from Google via cURL (-G: get, -s: silent) 
google_html=$(curl -Gs --compressed "https://$current_url/search?q=$query&nfpr=1")


# did you mean ( eg: linux torvalds ) Because we all know his real name is linux, not linus.
# silenced if quiet=true
if [ $quiet = "false" ]; then
    did_you_mean="$(echo "$google_html" | pup 'div.MUxGbd.v0nnCb.lyLwlc a' | grep "<a href="|sed ':a;N;$!ba;s/\n/ /g'| recode html..ISO-8859-1| sed 's/^.*&q=//g; s/&spell.*$//g; s/+/ /g; s/\%2B/ /g')"
    [ -n "$did_you_mean" ] && info_msg "Did you mean $did_you_mean?"
fi

#Module to search for basic queries like (Christmas Day, current date, weather)
basic_f(){
    snipcall "pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) text{}' | recode html..ISO-8859-1 | tr -d '\n' | tr ' ' '\0'  | xargs -0 -n10" 
    snipcall " pup 'html body div#main div div.ZINbbc.xpd.O9g5cc.uUPGi div div div div.kCrYT div div div div.BNeawe.iBp4i.AP7Wnd div div.BNeawe.iBp4i.AP7Wnd text{}'| recode html..ISO-8859-1| sed 's/Ã‚//g'"
    snipcall " pup 'html body div#main div div.ZINbbc.xpd.O9g5cc.uUPGi div.kCrYT div div.BNeawe.s3v9rd.AP7Wnd div.Ap5OSd div.BNeawe.s3v9rd.AP7Wnd span.FCUp0c.rQMQod text{}'| head -n1 |recode html..ISO-8859-1"
    snipcall "pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div text{}' | recode html..ISO-8859-1| strings | sed '1d;$d'| tr -d '\n' | tr ' ' '\0' | xargs -0 -n10 "
}

# Maths module to search for eg. ( what is 2+2 )
math_f(){
    snipcall " pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) text{}' | sed 's/\n\ //g' | recode html..ISO-8859-1"
    snipcall " pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) text{}' | sed 's/\n\ //g' | recode html..ISO-8859-1"
}


knowledgeGraph_f(){
    # Knowledge Graph - right ( eg: the office )
    snipcall " pup 'div.kCrYT:nth-child(4) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > div:nth-child(1) ' | recode html..ISO-8859-1 | sed '1d;$d'| tr -d '\n' | tr ' ' '\0'  | xargs -0 -n10"

    #kno_top="$(echo "$google_html" | pup 'html body div#main div div.ZINbbc.xpd.O9g5cc.uUPGi div div div div.Xdlr0d div.idg8be a.BVG0Nb div div div.RWuggc.kCrYT json{}' | jq -r '.[] | .children | .[] | .text' | sed ':a;N;$!ba;s/\n/ /g;s/null/\n/g' | sed '1s/.*/* &/;2,$s/.*/*&/;$d' | recode html..ISO-8859-1)"
    #[ -n "$kno_top" ] && output "$kno_top" && exit 0

    # For questions like ( what is c++ )
    kno_right="$(echo "$google_html" | pup 'div.kCrYT:nth-child(4) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div'| recode html..ISO-8859-1 | sed '1d;$d')"
    ln="$(echo "$kno_right" | grep -n "BNeawe" | grep 'span' | cut -d: -f1)"
    ln=$((ln - 1))
    [ $ln -gt 0 ] && kno_right="$(echo "$kno_right" | head -${ln})"
    kno_right="$(echo "$kno_right" | tr -d '\n' | tr ' ' '\0'  | xargs -0 -n10)"
    [ -n "$kno_right" ] && output "$kno_right" && exit 0
}

richanswer_f(){
    # Rich Answers ( eg: elevation of mount everest )
    snipcall " pup 'html body div#main div div.ZINbbc.xpd.O9g5cc.uUPGi div.kCrYT div div.BNeawe.s3v9rd.AP7Wnd div.Ap5OSd div.BNeawe.s3v9rd.AP7Wnd span.FCUp0c.rQMQod' | head -n1 | recode html..ISO-8859-1"
}

lyrics_f(){
    # Lyrics ( eg: gecgecgec lyrics )
    snipcall " pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) text{}' | recode html..ISO-8859-1"
}


conversions_f(){
    # Units Conversion ( eg: 1m into 1 cm )
    snipcall " pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) json{}' | jq -r '.[] | .children | .[0] | .value' | recode html..ISO-8859-1"
    # Currency Conversion ( eg: 1 USD in rupee )
    snipcall " pup '#main > div:nth-child(4) > div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) text{}' | sed 's/\n//g;s/\ /\0/g' | recode html..ISO-8859-1"
}

translations_f(){
    # Translate ( eg: Vais para cascais? em ingles )
    snipcall "pup '#main > div:nth-child(5) > div:nth-child(1) > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) json{}' | jq -r '[.[] | .children | .[] | select(.class!=\"BCGytf\")][1] | .text' | sed 's/null//g' | recode html..ISO-8859-1"
}

# Snippets are prioritized according to their sequence below
knowledgeGraph_f
basic_f
math_f
richanswer_f
lyrics_f
conversions_f
translations_f


